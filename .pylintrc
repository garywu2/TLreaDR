# Pylint output cheatsheet:
# [R]efactor for a “good practice” metric violation
# [C]onvention for coding standard violation
# [W]arning for stylistic problems, or minor programming issues
# [E]rror for important programming issues (i.e. most probably bug)
# [F]atal for errors which prevented further processing

[MASTER]

# Use multiple processes to speed up Pylint.
jobs=4

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=


[REPORTS]

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[BASIC]

# Naming style matching correct argument names
argument-naming-style=snake_case

# Naming style matching correct attribute names
attr-naming-style=snake_case

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,
          bar,
          baz,
          cats

# Naming style matching correct class names
class-naming-style=PascalCase

# Naming style matching correct constant names
const-naming-style=snake_case

# Naming style matching correct function names
function-naming-style=snake_case

# Naming style matching correct module names
module-naming-style=snake_case

# Naming style matching correct variable names
variable-naming-style=snake_case


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=LF

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=2

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='  '

# Maximum number of characters on a single line.
max-line-length=80

# Maximum number of lines in a module
max-module-lines=1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=yes

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=yes


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of locals for function / method body
max-locals=15

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[OVERRIDES]

# List of pylint default rules to override
disable=missing-final-newline, pointless-string-statement